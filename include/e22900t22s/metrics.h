/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * Introduction
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

/**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************//**
 * @file      e22900t22s/metrics.h
 * 
 * @version   1.0
 *
 * @date      09-04-2025
 *
 * @brief     LoRa E-Byte E22-900T2SS transceiver driver
 *  
 * @author    Fábio D. Pacheco, 
 * @email     fabio.d.pacheco@inesctec.pt or pacheco.castro.fabio@gmail.com
 *
 * @copyright Copyright (c) [2025] [Fábio D. Pacheco]
 * 
 * @note      Manuals:
 * 
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * Definition file
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

#ifndef E22900T22S_METRICS_H
#define E22900T22S_METRICS_H

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * Imported libraries
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

#include <e22900t22s/core.h>
#include <e22900t22s/mixip.h>

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * Data structures
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

typedef struct{
  float current;
  float past;
} e22900t22s_rssi_t;

typedef struct{
  float Pr;                                        // Received signal power (dBm)
  float SNR;                                       // Signal to Noise ratio (dBm)
} e22900t22s_rx_metric_t;

typedef struct{
  float                       No;                  // Noise power (dBm) (permanent)
  e22900t22s_rx_metric_t      sample[ NSEG_MAX ];  // Received signals power per data buffer arrival (temporary)
  uint8_t                     n_samples;           // Number of samples captured (temporary)
  uint32_t                    n_sent;              // Number of packets sent over time (permanent)
  uint32_t                    n_received;          // Number of packets received over time (permanent)
  e22900t22s_mixip_segments_t tmp;                 // Auxilary struct to understand the limits of segments
} e22900t22s_log_t; 

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * Prototypes
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

/**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************//**
 * @brief Gets the E22900T22S EEPROM stored RSSI.
 *  
 * @param[out] rssi The object filled with the current and last value of the RSSI read from the registers.
 * @param[in] dev The E22900T22S object.
 * 
 * @return Upon success, it fill `rssi` struct and it returns 0. \n 
 *         Otherwise, -1 is returned and `errno` is set to indicate the error.
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
int8_t e22900t22s_get_rssi( e22900t22s_rssi_t * rssi, e22900t22s_t * dev );

/**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************//**
 * @brief Reads and returns the noise power at the antenna.
 *  
 * @param[in] dev The E22900T22S object.
 * @param[in] tmp Activate the configuration temporary to perform the retrive. \n 
 *                If tmp is greater than 0 it will set the EEPROM ambient noise value, retrive the noise and in the end reset the ambient noise.
 *                If tmp is 0 it will perform the operation without changing the ambient noise EEPROM value, but this has to be activated, otherwise error is retuned.
 * 
 * @return Upon success, it returns the Noise power in dBm. \n 
 *         Otherwise, 0 is returned and `errno` is set to indicate the error. \n
 *         ECANCELED indicates that the operation was canceled due to an error.
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
float e22900t22s_get_noise_rssi( e22900t22s_t * dev, uint8_t tmp );

/**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************//**
 * @brief Retrives the signal power in dBm from the byte sent.
 *  
 * @param[in] data The rssi byte in end of the segment.
 * 
 * @return Returns the signal RSSI for the byte sent.
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
float e22900t22s_get_signal_rssi( const uint8_t data );

/**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/

#endif

/***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
 * End file
 **************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
